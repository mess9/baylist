package org.baylist.tests.api;

import org.baylist.api.TodoistFeignClient;
import org.baylist.dto.todoist.api.Task;
import org.baylist.service.TodoistService;
import org.baylist.tests.BaseTest;
import org.baylist.util.extension.FilToken;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;

import java.util.List;
import java.util.Optional;

import static org.assertj.core.api.Assertions.assertThat;
import static org.awaitility.Awaitility.await;

public class TodoistFeignCloseReopenTest extends BaseTest {

	@Autowired
	TodoistService todoistService;

	@Autowired
	TodoistFeignClient todoistApi;

	@FilToken
	String token;


	@Test
//    @Disabled("тест регулярно падает, надо бы починить")
	public void closeAndReopenTask() {
		String projectId = todoistApi.getProjects(token).stream().filter(p -> p.getName().equals("buylist")).findFirst().orElseThrow().getId();

		Task newTask = Task.builder()
				.content("Открытая Таска")
				.projectId(projectId)
				.build();
		Task createdTask = todoistService.createTask(token, newTask);

		List<Task> tasksBeforeClosing = todoistApi.getTasksByProject(token, projectId);
		Optional<Task> taskInProjectBeforeClosing = tasksBeforeClosing.stream()
				.filter(t -> t.getId().equals(createdTask.getId()))
				.findAny();
		assertThat(taskInProjectBeforeClosing).isPresent();

		todoistApi.closeTask(token, createdTask.getId());

		List<Task> tasksAfterClosing = todoistApi.getTasksByProject(token, projectId);
		Optional<Task> taskInProjectAfterClosing = tasksAfterClosing.stream()
				.filter(t -> t.getId().equals(createdTask.getId()))
				.findAny();
		assertThat(taskInProjectAfterClosing).isNotPresent();

		todoistApi.reopenTask(token, createdTask.getId());

		List<Task> tasksAfterReopening = todoistApi.getTasksByProject(token, projectId);
		Optional<Task> taskInProjectAfterReopening = tasksAfterReopening.stream()
				.filter(t -> t.getId().equals(createdTask.getId()))
				.findAny();
		await().until(taskInProjectAfterReopening::isPresent);
	}
}

