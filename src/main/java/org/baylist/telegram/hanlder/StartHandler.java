package org.baylist.telegram.hanlder;

import lombok.AccessLevel;
import lombok.RequiredArgsConstructor;
import lombok.experimental.FieldDefaults;
import org.baylist.dto.telegram.Callbacks;
import org.baylist.dto.telegram.ChatValue;
import org.baylist.dto.telegram.Commands;
import org.baylist.dto.telegram.State;
import org.baylist.service.CommonResponseService;
import org.baylist.service.UserService;
import org.baylist.telegram.hanlder.config.DialogHandler;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardRow;

import java.util.List;

@Component
@RequiredArgsConstructor
@FieldDefaults(makeFinal = true, level = AccessLevel.PRIVATE)
public class StartHandler implements DialogHandler {

	UserService userService;
	CommonResponseService responseService;


	// state START
	@Override
	public void handle(ChatValue chatValue) {
		if (chatValue.isCallback()) {
			String callbackData = chatValue.getCallbackData();
			if (callbackData.equals(Callbacks.START.getCallbackData())) {
				todoistAnswer(chatValue);
			} else if (callbackData.equals(Callbacks.START_1_TODOIST_TOKEN_REQUEST.getCallbackData())) {
				if (userService.isExistToken(chatValue.getUserId())) {
					responseService.existToken(chatValue);
				} else {
					responseService.tokenRequest(chatValue);
				}
			} else if (callbackData.equals(Callbacks.START_1_TODOIST_TOKEN_CHANGE.getCallbackData())) {
				responseService.tokenRequest(chatValue);
			} else if (callbackData.equals(Callbacks.START_2_FRIENDS_REQUEST.getCallbackData())) {
				if (userService.isExistToken(chatValue.getUserId())) {
					friendsAnswer(chatValue);
				} else {
					responseService.doneWithouFriends(chatValue, State.START);
				}
			} else if (callbackData.equals(Callbacks.START_2_ADD_FRIENDS.getCallbackData())) {
				responseService.friendsRequest(chatValue, State.START);
			} else if (callbackData.equals(Callbacks.START_DONE.getCallbackData())) {
				done(chatValue);
			}

		} else {
			Update update = chatValue.getUpdate();
			if (update.hasMessage() && update.getMessage().hasText() && update.getMessage().getText().equals(Commands.START.getCommand())) {
				responseService.start(chatValue);
			} else if (update.hasMessage() && update.getMessage().hasText() && update.getMessage().getText().length() == 40) {
				responseService.tokenResponse(chatValue, true);
			} else if (update.hasMessage() && update.getMessage().hasContact()) {
				responseService.addFriend(chatValue, update);
			} else {
				error(chatValue);
			}
		}
	}

	private void friendsAnswer(ChatValue chatValue) {
		chatValue.setReplyText("""
				<b> –≤—Ç–æ—Ä–æ–π —ç—Ç–∞–ø –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ </b>
				–¥–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–∑–µ–π, –∏–ª–∏ –Ω—É –∏—Ö –≤—Å–µ—Ö?
				
				<i>—ç—Ç–æ –º–æ–∂–Ω–æ –±—É–¥–µ—Ç —Å–¥–µ–ª–∞—Ç—å –ø–æ–∑–∂–µ</i>
				""");
		InlineKeyboardMarkup markup = new InlineKeyboardMarkup(
				List.of(new InlineKeyboardRow(InlineKeyboardButton.builder()
								.text("–¥–æ–±–∞–≤–∏—Ç—å")
								.callbackData(Callbacks.START_2_ADD_FRIENDS.getCallbackData())
								.build()),
						new InlineKeyboardRow(InlineKeyboardButton.builder()
								.text("—Ç–∞ –Ω—É –∏—Ö")
								.callbackData(Callbacks.START_DONE.getCallbackData())
								.build())
				));
		chatValue.setReplyKeyboard(markup);
		chatValue.setReplyParseModeHtml();
	}

	private void done(ChatValue chatValue) {
		chatValue.setReplyText("""
				<b> –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ </b>
				
				–≤—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –ø–æ–ø–∞—Å—Ç—å
				–≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∫–æ–º–∞–Ω–¥–æ–π:
				/menu
				
				<b>–Ω–∞—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ</b> —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É –∫ –±–æ—Ç—É
				/help
				<i>–æ—Å–æ–±–µ–Ω–Ω–æ —Ä–∞–∑–¥–µ–ª - <u>–ø–æ —Ä–∞–±–æ—Ç–µ —Å –±–æ—Ç–æ–º</u></i>
				—Ç–∞–º –Ω–∏—á–µ–≥–æ —Å–ª–æ–∂–Ω–æ–≥–æ
				—á–µ—Å—Ç–Ω–æ-—á–µ—Å—Ç–Ω–æ
				
				–ø—Ä–æ—Å—Ç –µ—Å–ª–∏ –Ω–∏ —Ä–∞–∑—É –Ω–µ –ø—Ä–∏—Ö–æ–¥–∏–ª–æ—Å—å –∏–º–µ—Ç—å –¥–µ–ª —Å —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–æ–º —Å–ª–æ–∂–Ω–µ–µ –ø–∞—Ä—ã –∫–æ–º–∞–Ω–¥, —Ç–æ –∫–∞–∫–∏–µ-—Ç–æ –º–æ–º–µ–Ω—Ç—ã –º–æ–≥—É—Ç –ø–æ–∫–∞–∑–∞—Ç—å—Å—è –Ω–µ–æ—á–µ–≤–∏–¥–Ω—ã–º–∏
				
				–∞–≤—Ç–æ—Ä –±–æ—Ç–∞ –ø–æ—Å—Ç–∞—Ä–∞–ª—Å—è –ø–æ–¥—Å—Ç–µ–ª–∏—Ç—å —Å–æ–ª–æ–º–∫–∏ –≤–µ–∑–¥–µ –≥–¥–µ —Ç–æ–ª—å–∫–æ –º–æ–∂–Ω–æ
				–Ω–æ –≤—Å–µ —Å–∏—Ç—É–∞—Ü–∏–∏ –ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ
				""");
		chatValue.setReplyParseModeHtml();
		chatValue.setState(State.DEFAULT);
	}

	private void todoistAnswer(ChatValue chatValue) {
		chatValue.setReplyText("""
				‚öô –ø–µ—Ä–≤—ã–π —ç—Ç–∞–ø –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
				–±—É–¥–µ—Ç–µ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞–¥–∞—á–∏ –¥—Ä—É–∑—å—è–º üì© –∏–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º—Å—è –≤ <b>todoist</b>?
				
				–±–µ–∑ –ø—Ä–∏–≤—è–∑–∫–∏ –∫ todoist –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞–¥–∞—á–∏ —Ç–µ–º, —É –∫–æ–≥–æ –æ–Ω –µ—Å—Ç—å.
				
				<i>–¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–∫–µ–Ω todoist –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –ø–æ–∑–∂–µ ‚è≥</i>
				""");
		InlineKeyboardMarkup markup = new InlineKeyboardMarkup(
				List.of(new InlineKeyboardRow(InlineKeyboardButton.builder()
								.text("–¥–∞ (–¥–æ–±–∞–≤–∏—Ç—å/–∏–∑–º–µ–Ω–∏—Ç—å —Ç–æ–∫–µ–Ω)")
								.callbackData(Callbacks.START_1_TODOIST_TOKEN_REQUEST.getCallbackData())
								.build()),
						new InlineKeyboardRow(InlineKeyboardButton.builder()
								.text("–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –ø–æ–∫–∞")
								.callbackData(Callbacks.START_2_FRIENDS_REQUEST.getCallbackData())
								.build())
				));
		chatValue.setReplyKeyboard(markup);
		chatValue.setReplyParseModeHtml();
	}

	private static void error(ChatValue chatValue) {
		chatValue.setReplyText("""
				–Ω–µ –º–æ–≥—É –ø–æ–Ω—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ :(
				
				—è –±–æ—Ç –ø—Ä–æ—Å—Ç–æ–π, –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ç–æ –º–æ–≥—É, —á—Ç–æ –æ–∂–∏–¥–∞—é —Ç—É—Ç —É–≤–∏–¥–µ—Ç—å, –Ω–∞–ø—Ä–∏–º–µ—Ä —Ç–æ–∫–µ–Ω, –∏–ª–∏ –∫–æ–Ω—Ç–∞–∫—Ç
				(–µ—Å–ª–∏ –±—ã–ª –≤–≤–µ–¥—ë–Ω —Ç–æ–∫–µ–Ω –∏–ª–∏ –∫–æ–Ω—Ç–∞–∫—Ç - —Ç–æ –≤–µ—Ä–æ—è—Ç–Ω–æ –≤ –Ω–∏—Ö –∑–∞–∫—Ä–∞–ª–∞—Å—å –æ—à–∏–±–∫–∞, –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫—É –∏ –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑)
				–¥—Ä—É–≥–æ–π —Ç–µ–∫—Å—Ç —è –ø–æ–∫–∞ –Ω–µ –ø–æ–Ω–∏–º–∞—é
				
				–µ—Å–ª–∏ —É —Ç–µ–±—è –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ —Å–≤—è–∑—å —Å todoist –∏/–∏–ª–∏ –Ω–∏–∫—Ç–æ –∏–∑ —Ç–≤–æ–∏—Ö –¥—Ä—É–∑–µ–π –Ω–µ –¥–æ–±–∞–≤–∏–ª —Ç–µ–±—è —Å–µ–±–µ –≤ —ç—Ç–æ–º –±–æ—Ç–µ –∫–∞–∫ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–≥–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –∑–∞–¥–∞—á
				—Ç–æ —É–≤—ã, –¥–ª—è —Ç–µ–±—è, —ç—Ç–æ—Ç –±–æ—Ç –ø–æ–∫–∞ —á—Ç–æ –±—É–¥–µ—Ç –±–µ—Å–ø–æ–ª–µ–∑–µ–Ω
				
				(–ø–æ—Ç–æ–º, –∫–æ–≥–¥–∞ –º—ã —Å–¥–µ–ª–∞–µ–º —Å–≤–æ–π ui –≤–º–µ—Å—Ç–æ todoist - –Ω–∏–≥–¥–µ –Ω–µ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è, –∞ –ø–æ–∫–∞ —Ç–æ–ª—å–∫–æ —Ç–∞–∫)
				""");
		InlineKeyboardMarkup markup = new InlineKeyboardMarkup(
				List.of(new InlineKeyboardRow(InlineKeyboardButton.builder()
						.text("–¥–∞–≤–∞–π –≤—Å—ë –∑–∞–Ω–æ–≤–æ")
						.callbackData(Callbacks.START.getCallbackData())
						.build())
				));
		chatValue.setReplyKeyboard(markup);
	}


}
